{
	{
		var2:?
		var2:
		(? $
			(imp
				(+ var2 1 )
				(print "incremented var2: " var2 nl))
			(imp
				(print "var2 does not exist, setting it to 0" nl)
			0))

		(? (< 10 ) @)
	}

	0 {
		(print "Very implicit loop " $ nl)
		(+ 1)
		(? (< 10) @)
	}

	numa: 1
	numb: 2
	res: 3

	aList: [ numa numb res ]

	(print "Divisions? " (/ 84 2) nl)
	(print "'" -.23 "'" nl)


/*
	pos: [
Â¤ {
				doc: "Coordinate for a bouncing object, increments when read, direction changes when position exceeds max,
						Arguments: (initial) value, direction (also the velocity), minpos & maxpos (when to change direction)"
				create: {
					v:   #value
					dir: #direction
					min: #minpos
					max: #maxpos
				}
				read: {
					(? (| (> max) (< min)) { dir:: (* dir (- 0 1) )})
					v: (+ v 1)
				}
			}
		]

		bouncer2d: [
			#{
				create: {
					x: (pos value: 10 dir: 1 min: 0 max: 799)
					y: (pos 10 1 0 599) // example unnamed (positional) arguments
				}
			}
		]

		ball: (bouncer2d)

		{
			(window.dot 6 ball.x ball.y)
			(? (window.flip) @)
		}

	(window "slisp test" 800 600)
	(window.color 0 0 0)
	(window.fill)
	(window.color 255 128 0)

	x: 0
	y: 0
	y:21.2
	xd: 1.421812891
	yd: (- 0 1.875231)
	{
		x: (+ x xd)
		(? (| (>  x 799) (< x 1)) {xd::(* xd (- 0 1))})

		y: (+ y yd)
		(? (| (>  y 599) (< y 1)) { yd:: (* yd (- 0 1)) } )

		(window.dot 6 x y)
		(? (window.flip) @)
	}
*/
	(print "Enter a number: ")
	numa: (read)
	(print nl "Enter another number: ")
	numb: (read)
	res: (+ numa numb)
	(print nl numa " + " numb " = " $ nl)

	(print "Enter a variable name to set:")
	(read): res
	// Does this throw you off?
	// and this?
	(print nl "Enter the variable name to read: ")
        varName: (read) (print nl "The value of " varName " is " (deref varName) nl)


	(+ 1 2)
	(print "I can do math: " (/ (+ 1 2 3 4) 2) nl)
	(print "Who _ARE_ you? ")
	uName: (read)
	{ // Alternative IMP syntax
		backup: $
		uName: (sprint "Local_" uName "_scoped")
		(print "Shadowed variable: " uName nl)
		backup
	}
	(print "Hello '" $ "'" nl)
	(print "Escape test: \"" uName "\"" nl)
	41.5
	(+ .5)
	(print "Oh yeah? We can do that " $ nl)
	(print "Some comparison tests" nl)
	"a"
	(? (= "a") (print "a = a" nl) (print "a not a" nl))
	(? (= "a" "a") (print "a = a" nl) (print "a not a" nl))
	(? (= "a" "b") (print "a = b" nl) (print "a not b" nl))
	0
	(? (= 0) (print "0 = 0" nl) (print "0 not 0" nl))
	(? (= 1 2) (print "1 = 2" nl) (print "1 not 2" nl))
	(? (= 2 2) (print "2 = 2" nl) (print "2 not 2" nl))

	(print "Div test: " ( / 1 ( - 0 2 )  ) nl)


	2
	(print $ nl)
	(print ( < 6 ) nl)
	(print ( < 6 6 ) nl)
	7
	(print $ nl)
	(print ( < 6 ) nl)
	(print ( < 7 6 ) nl)

	(print $ nl)
	(print ( > 6 ) nl)
	(print ( > 6 3) nl)
	(print ( > 6 6 ) nl)
	2
	(print $ nl)
	(print ( > 6 ) nl )
	(print ( > 6 3) nl)

	var: (+ 2 2)

	(print "A loop:" nl)
	5
	(imp
		(print "  Loop:  " $ nl)
		(- 1)
		(? (! (= 0)) (imp $ @))
		(print "Loop ends>" $ nl)
	)
	(print "The previously set variable is " var nl)
	(print "> " $ nl)
	(print "One more time, " uName " ? [y/N]")
	(read)
	(? (= "y")
		(imp
			(print "Okay, lets do anoother one!" nl nl)
		@) // Jump back to start of closest imp

	)
	(print "Bye bye..")
	0
}
